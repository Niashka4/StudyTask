#include <iostream>
#include <cmath>  //  Подключаем библиотеку с математическими функциями
#include "Header6.h"  //  Подключаем заголовки
using namespace std;

int main() {
	int nomer;  //  Создаем переменную для номера

	for (;;) {  //  Запускаем бесконечный цикл
		cout << "Enter number of task: \n";  cin >> nomer;  //  Выводим текст с переносом курсора на следующую строку и вводим значение переменной номера

		if (nomer == 0) return 0;  //  Условие выхода из цикла
		if (nomer == 5) {  //  Условие для 5 номера
			int n = 0;  //  Создаем переменную для количества коэффициентов
			cout << "Enter the number of coefficients: "; cin >> n;  //  Выводим текст и вводим количество коэфициентов
			int* a1 = create1(n);  //  Создаем массив коэфициентов
			int* b1 = proizvod(a1, n);  //  Находим первую производную многочлена
			int* c1 = proizvod(b1, n - 1);  //  Находим вторую производную многочлена
			cout << "Coefficients of P''(x): \n";  //  Выводим текст с переносом курсора на следующую строку
			print1(c1, n - 2);  //  Печатаем массив новых коэфициентов
		}
		if (nomer == 8) {  //  Условие для 8 номера
			int n = 0;  //  Создаем переменную для количества коэффициентов
			cout << "Enter the number of coefficients: "; cin >> n;  //  Выводим текст и вводим количество коэфициентов
			int* a2 = create1(n);  //  Создаем массив коэфициентов
			int* b2 = proizvod(a2, n);  //  Находим производную многочлена
			int* c2 = proizved(a2, b2, n, n - 1);  //  Находим произведение двух многочленов
			cout << "Coefficients of P(x) * P'(x): \n";  //  Выводим текст с переносом курсора на следующую строку
			print1(c2, 2 * n - 1);  //  Печатаем массив новых коэфициентов
		}
		if (nomer == 15) {  //  Условие для 15 номера
			int n = 0;  //  Создаем переменную для количества строк треугольника
			cout << "n = "; cin >> n; // кол-во строк треугольника
			int** a3 = new int* [n + 1];  //  Создаем двумерный массив
			for (int i = 0; i <= n; i++)  //  Запускаем цикл по строкам массива
				a3[i] = new int[i + 1]; //выделяем память под i-ую строку
			a3[0][0] = 1;  //  Первый элемент массива
			a3[1][0] = a3[1][1] = 1;  //  Заполняем второй ряд массива
			for (int i = 2; i <= n; i++) {  //  Запускаем цикл по строкам массива
				a3[i][0] = 1;  //  Заполняем первый столбец массива
				for (int j = 1; j < i; j++)  //  Запускаем цикл по столбцам двумерного массива
					a3[i][j] = a3[i - 1][j - 1] + a3[i - 1][j];  //  Высчитываем средние элементы массива
				a3[i][i] = 1;  //  Заполняем массив
			}
			for (int i = 0; i < n; i++) {  //  Запускаем цикл по строкам массива
				for (int j = 0; j <= i; j++) {  //  Запускаем цикл по столбцам двумерного массива
					if (a3[i][j] % 2 == 0) a3[i][j] = 0;  //  Если элемент четный, то присваиваем его нулю
					else a3[i][j] = 1;  //  Иначе единице
				}
			}
			cout << "Triangle of Serpinskiy \n"; //  Выводим текст с переносом курсора на следующую строку
			for (int i = 0; i < n; i++, cout << endl)  //  Запускаем цикл по строкам массива
				for (int j = 0; j <= i; j++) {  //  Запускаем цикл по столбцам двумерного массива
					if (a3[i][j] == 0) cout << " " << " ";  //  Если элемент равен 0, то выводим пустоту
					else cout << a3[i][j] << " ";  //  Если элемент равен 1, то выводим единицу
				}
		}
	}
	return 0;
}