#include <iostream>  //  Подключаем нужные библиотеки

using namespace std;

struct list {  //  Структура списка
	int inf;  //  Значение ячейки
	list* next;  //  Ссылка на следующий элемент
	list* prev;  //  Ссылка на предыдущий элемент
};

void push(list*& h, list*& t, int x) {  //  Функция добавления элемента в конец списка
	list* r = new list;  //  Создаём новую ячейку
	r->inf = x;  //  Её значение 
	r->next = NULL;  //  Следующий элемент пуст
	if (!h && !t) {  //  Если список пуст, то...
		r->prev = NULL;  //  Предыдущая ячейка пуста
		h = r;  //  Значение головы
	}
	else {  //  Иначе
		t->next = r;  //  Следующее после головы - новый элемент  
		r->prev = t;  //  Предыдущее для нового элемента - хвост
	}
	t = r;  //  Хвост теперь - это новый элемент
}

void print(list* h, list* t) {  //  Функция вывода списка
	list* p = h;  //  Создаём указатель на голову
	while (p) {  //  Пока указатель не пуст
		cout << p->inf << " ";  //  Выводим значение указателя
		p = p->next;  //  Двигаем указатель дальше
	}
}

list* find(list* h, list* t, int x) {  //  Функция поиска указателя на элемент со значением x
	list* p = h;  //  Создаём указатель на голову
	while (p) {  //  Пока указатель не пуст
		if (p->inf == x) break;  //  Если мы нашли этот элемент
		p = p->next;  //  Двигаем указатель дальше
	}
	return p;  //  Возвращаем указатель
}

void del_node(list*& h, list*& t, list* r) {  //  Функция удаления элемента
	if (r == h && r == t)  //  Если этот элемент единственный, то...
		h = t = NULL;  //  Голова и хвост пусты
	else if (r == t) {  //  Если это последний элемент...
		t = t->prev;  //  Хвост теперь - предыдущий элемент для хвоста
		t->next = NULL;  //  Следующий после хвоста - пустой элемент
	}
	else {  //  Иначе
		r->next->prev = r->prev;  //  Предыдущий для следующего после удаляемого - предыдущий для удаляемого
		r->prev->next = r->next;  //  Следующий для предыдущего для удаляемого - следующий для удаляемого
	}
	delete r;  //  Удаляем элемент
}

void result(list*& h, list*& t, int posl, int max) {  //  Функция для выполнения задания
	list* p = h;  //  Создаём указатель на голову
	while (p) {  //  Идём по всем элементам списка
		while (find(p->next, t,	p->inf) != 0) {  // Пока мы находим элемент с таким же значением как и p, начиная с p->next 
			del_node(p->next, t, find(p->next, t, p->inf));  //  Удаляем элемент с указателем на найденный дубликат
		}
		p = p->next;  //  Двигаем указатель дальше
	}
}

int main() {
	setlocale(LC_ALL, "Russian");  //  Подключаем русский язык
	int n, el = 0, posl = 0, max = 0;  //  Создаём необходимые переменные
	list* head = NULL;  //  Инициализируем голову
	list* tail = NULL;  //  Инициализируем хвост
	cout << "Введите количество чисел: "; cin >> n;  //  Вводим количество чисел
	for (int i = 0; i < n; i++) {  //  Проходим циклом от 0 до n
		cin >> el;  //  Вводим число
		push(head, tail, el);  //  Добавляем в список элемент
	}
	result(head, tail, posl, max);  //  Изменяем список по условию
	print(head, tail);  //  Печатаем список
	return 0;
}



